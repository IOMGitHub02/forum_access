<?php
// $Id$

/**
 * @file forum_access.module
 *
 * This module uses form_alter to add permissions and moderator settings to
 * forums.
 *
 */

/**
 * This function supplies the forum access grants. forum_access simply uses
 * roles as ACLs, so rids translate directly to gids.
 */
function forum_access_node_grants($user, $op) {
  $grants['forum_access'] = array_keys($user->roles);
  return $grants;
}

/**
 * Implementation of hook_node_access_records().
 *
 * Returns a list of grant records for the passed in node object.
 * Checks to see if maybe we're being disabled.
 */
function forum_access_node_access_records($node) {
  if (!forum_access_enabled()) {
    return;
  }

  static $grants = array();
  if (isset($node->tid) || isset($node->forum_tid)) {
    $tid = (isset($node->tid) ? $node->tid : $node->forum_tid);
    if (!isset($grants[$tid])) {
      $result = db_query('SELECT * FROM {forum_access} WHERE tid = %d', $tid);
      while ($grant = db_fetch_object($result)) {
        $grants[$tid][] = array(
          'realm' => 'forum_access',
          'gid' => $grant->rid,
          'grant_view' => $grant->grant_view,
          'grant_update' => $grant->grant_update,
          'grant_delete' => $grant->grant_delete,
          'priority' => 0,
        );
      }
      //drupal_set_message("forum_access_node_access_records($node->nid) (tid=$tid) returns ". var_export($grants[$tid], TRUE), 'status');
    }
    if (isset($grants[$tid])) {
      return $grants[$tid];
    }
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Remove inaccessible forums from the node form.
 */
function forum_access_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && $form['type']['#value'] .'_node_form' == $form_id) {
    forum_access_node_form($form_id, $form);
  }
  else if ($form_id == 'forum_form_container') {
    forum_access_forum_form($form_id, $form, TRUE);
  }
  else if ($form_id == 'forum_form_forum') {
    forum_access_forum_form($form_id, $form, FALSE);
  }
  else if ($form_id == 'user_admin_role') {
    forum_access_user_admin_role_form($form_id, $form);
  }
  else if ($form_id == 'content_access_admin_settings' && empty($_POST)) {
    $tr = 't';
    $variables = array('!content_type' => $tr('content type'), '!Forum_Access' => 'Forum Access', '!Forum_Access_link' => l('Forum Access', 'admin/content/forum'));
    if (arg(3) == 'forum') {
      drupal_set_message(t('Note: In Drupal, access can only be granted, not taken away. Whatever access you grant here will not be reflected on the !Forum_Access_link settings, but !Forum_Access can only allow <i>more</i> access, not less.', $variables), 'warning');
    }
    else {
      $vid = variable_get('forum_nav_vocabulary', '');
      $vocabulary = taxonomy_vocabulary_load($vid);
      if (isset($vocabulary->nodes[arg(3)]))
      {
        drupal_set_message(t('Note: Nodes of this !content_type can be put inside forums, where access to them will also be controlled by !Forum_Access.<br />In Drupal, access can only be granted, not taken away. Whatever access you grant here will not be reflected on the !Forum_Access_link settings, and vice versa, but any node access module can only allow <i>more</i> access, not less.', $variables), 'warning');
      }
    }
  }
}

/**
 * Rewrite the taxonomy item on the node form.
 */
function forum_access_node_form($form_id, &$form) {
  $vid = variable_get('forum_nav_vocabulary', '');

  if (!isset($form['taxonomy'][$vid]['#options'])) {
    return;
  }

  // forum administrators do NOT get their forms rewritten here.
  if (user_access('administer forums')) {
    return;
  }
  global $user;
  $roles = _forum_access_get_roles($user);
  $result = db_query("SELECT tid FROM {forum_access} WHERE rid IN (%s) AND grant_create = 1", $roles);
  while ($obj = db_fetch_object($result)) {
    $tids[$obj->tid] = $obj->tid;
  }

  // Also get all forums they happen to be able to moderate.

  $result = db_query("SELECT a.name AS tid FROM {acl} a INNER JOIN {acl_user} u ON a.acl_id = u.acl_id WHERE a.module = 'forum_access' AND u.uid = %d", $user->uid);
  while ($obj = db_fetch_object($result)) {
    $tids[$obj->tid] = $obj->tid;
  }

  // Ensure the forum they're trying to post to directly is allowed, otherwise
  // there will be much confusion.
  $forum_tid = arg(3);
  if (is_numeric($forum_tid) && $forum_tid && !$tids[$forum_tid]) {
    drupal_access_denied();
    module_invoke_all('exit');
    exit;
  }

  foreach ($form['taxonomy'][$vid]['#options'] as $tid => $name) {
    if (!is_numeric($tid)) {
      $options[$tid] = $name;
    }
    elseif (is_object($name)) {
      foreach ($name->option as $sub_tid => $sub_name) {
        if (!empty($tids[$sub_tid])) {
          $options[$tid]->option[$sub_tid] = $sub_name;
        }
      }
    }
    elseif ($tids[$tid]) {
      $options[$tid] = $name;
    }
  }

  if ($options) {
    $form['taxonomy'][$vid]['#options'] = $options;
  }
  else {
    unset($form['taxonomy'][$vid]);
  }
}

/**
 * Rewrite the forum administration page with our new access rules.
 */
function forum_access_forum_form($form_id, &$form, $container) {
  $rids = array();
  $result = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
  while ($obj = db_fetch_object($result)) {
    $rids[$obj->rid] = $obj->name;
  }

  if (isset($form['tid']['#value'])) {  // edit
    $result = db_query("SELECT * FROM {forum_access} where tid=%d", $form['tid']['#value']);

    $view = $update = $delete = $create = array();
    while ($forum_access = db_fetch_object($result)) {
      $row_received = TRUE;
      if ($forum_access->grant_view) {
        $view[] = $forum_access->rid;
      }
      if ($forum_access->grant_update) {
        $update[] = $forum_access->rid;
      }
      if ($forum_access->grant_delete) {
        $delete[] = $forum_access->rid;
      }
      if ($forum_access->grant_create) {
        $create[] = $forum_access->rid;
      }
      if ($forum_access->rid == DRUPAL_AUTHENTICATED_RID) {  // this is our reference
        $fa_priority = $forum_access->priority;
      }
    }
    if (!isset($row_received) && empty($form['#parameters'][1]['post'])) {
      drupal_set_message(t('If you have only just installed !Forum_Access, then the posts in this forum may still be accessible, but once your permissions get rebuilt (intentionally or behind-the-scenes by some other module), they will vanish &mdash; so, be sure to set the desired Access Control below and save!', array('!Forum_Access' => 'Forum Access')), 'error');
    }
  }
  else {  // create
    // Default to all users can read; all logged in users can post.
    $view = array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID);
    $create = array(DRUPAL_AUTHENTICATED_RID);
    $update = $delete = array();
  }

  $form['forum_access'] = array('#type' => 'fieldset',
    '#title' => t('Access control'),
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  $tr = 't';
  $variables = array(
    '!access_content' => '<em>'. l($tr('access content'), 'admin/user/permissions', array('fragment' => 'module-node', 'html' => TRUE)). '</em>', 
    '%administer_nodes' => $tr('administer nodes')
  );
  $form['forum_access']['note'] = array('#type' => 'markup',
    '#value' => '<div>'. t('Note that users need at least the !access_content permission to be able to deal in any way with content. Furthermore note that content which is not published is treated in a different way by Drupal: It can be viewed only by its author or users with the %administer_nodes permission.', $variables) .'</div>',
  );
  $form['forum_access']['view'] = array('#type' => 'checkboxes',
    '#prefix' => '<div class="forum-access-div">',
    '#suffix' => '</div>',
    '#options' => $rids,
    '#title' => t('View this forum'),
    '#default_value' => $view
  );
  $form['forum_access']['create'] = array('#type' => 'checkboxes',
    '#prefix' => '<div class="forum-access-div">',
    '#suffix' => '</div>',
    '#options' => $rids,
    '#title' => t('Post in this forum'),
    '#default_value' => $create
  );

  // Containers do not contain any nodes, so these fields become meaningless for them.
  if (!$container) {
    $form['forum_access']['update'] = array('#type' => 'checkboxes',
      '#prefix' => '<div class="forum-access-div">',
      '#suffix' => '</div>',
      '#options' => $rids,
      '#title' => t('Edit posts'),
      '#default_value' => $update
    );
    $form['forum_access']['delete'] = array('#type' => 'checkboxes',
      '#prefix' => '<div class="forum-access-div">',
      '#suffix' => '</div>',
      '#options' => $rids,
      '#title' => t('Delete posts'),
      '#default_value' => $delete
    );
  }
  // Find our moderator ACL:

  $form['forum_access']['clearer'] = array(
    '#value' => '<div class="forum-access-clearer"></div>',
  );
  drupal_add_css(drupal_get_path('module', 'forum_access') .'/forum_access.css');
  if (isset($form['tid']['#value'])) {  // edit, not new
    $acl_id = db_result(db_query("SELECT acl_id from {acl} WHERE module = 'forum_access' AND name = '%d'", $form['tid']['#value']));
    if (!$acl_id) { // create one
      $acl_id = acl_create_new_acl('forum_access', $form['tid']['#value']);
      // update every existing node in this forum to use this acl.
      $result = db_query("SELECT nid FROM {term_node} WHERE tid = %d", $form['tid']['#value']);
      while ($node = db_fetch_object($result)) {
        // all privs to this ACL.
        acl_node_add_acl($node->nid, $acl_id, 1, 1, 1);
      }
    }
    $form['forum_access']['acl'] = acl_edit_form($acl_id, t('Moderators'));
  }

  foreach (module_implements('node_access_records') as $module) {
    $na_modules[$module] = $module;
  }
  unset($na_modules['forum_access']);
  unset($na_modules['acl']);
  if (count($na_modules)) {
    $form['forum_access']['interference'] = array(
      '#type' => 'fieldset',
      '#title' => t('Module interference'),
      '#collapsible' => TRUE,
    );
    $tr = 't';
    $variables = array(
      '!content_type' => $tr('content type'),
      '%content_type' => node_get_types('name', 'forum'),
      '!Forum_Access' => 'Forum Access',
      '!Content_Access' => 'Content Access',
      '!ACL' => 'ACL',
      '!module_list' => '<ul><li>'. implode($na_modules, '</li><li>') .'</li></ul>',
    );
    $form['forum_access']['interference'][] = array(
      '#type' => 'item',
      '#value' => '<p>'. t("Besides !Forum_Access (and !ACL) you have installed the following node access module(s): !module_list   The grants of every module will be combined for each node. Access can only be granted, not removed&mdash;if a certain module grants a permission, the other(s) cannot deny it.", $variables) .'</p>',
      '#description' => t('Forums can contain other content types besides %content_type; !Forum_Access will contribute the grants defined above to every node in this forum, but other node access control modules may also contribute their grants, especially to nodes of types other than %content_type. <br /> In case of problems, you should temporarily (!) install the %devel_node_access module (part of the !Devel module) and enable its debug mode: this will show you all the grants that actually control your nodes.', $variables += array('%devel_node_access' => 'devel_node_access', '!Devel' => l('Devel', 'http://drupal.org/project/devel'))),
    );

    if (module_exists('content_access')) {
      $ca_settings = variable_get('content_access_settings', array());
      foreach (array('view', 'update', 'delete', 'per_node') as $type) {
        $value = content_access_get_settings($type, 'forum');
        if (!empty($value)) {
          $ca_interferes = TRUE;
        }
      }
      $ca_priority = content_access_get_settings('priority', 'forum');
      $is_conflict = $ca_priority >= $fa_priority && !empty($ca_interferes) || $ca_priority > $fa_priority;
      $variables += array(
        '!Content_Access' => 'Content Access',
        '!link' => l(t('!Content_Access configuration for the %content_type type', $variables), 'admin/content/node-type/forum/access', array('html' => TRUE), NULL, NULL, FALSE, TRUE),
        '%Advanced' => $tr('Advanced'),
      );
      $specifically = ($ca_priority == $fa_priority ? t('Specifically, any grants given by !Content_Access cannot be taken back by !Forum_Access.', $variables) : '');
      if ($is_conflict) {
        $form['forum_access']['interference']['by_content_access'] = array(
          '#type' => 'fieldset',
          '#title' => 'Content Access',
          '#collapsible' => FALSE,
          '#attributes' => array('class' => 'error'),
        );
        $form['forum_access']['interference']['by_content_access'][] = array(
          '#value' => '<div>'. t('You have set the !Content_Access module to control access to content of type %content_type&mdash;this can interfere with proper operation of !Forum_Access!', $variables) ." $specifically</div>",
        );
        if ($ca_priority == $fa_priority) {
          $form['forum_access']['interference']['by_content_access'][] = array(
            '#value' => '<div>'. t("Unless you really know what you're doing, we recommend that you go to the !link page and clear all checkboxes. This will instruct !Content_Access to leave the %content_type nodes alone. However, if you put nodes of other !content_types into forums as well, then these !content_types will continue to have this problem.", $variables) .'</div>',
          );
        }
        else {
          $form['forum_access']['interference']['by_content_access'][] = array(
            '#value' => '<div>'. t("The priority of !Content_Access ($ca_priority) is higher than the priority of !Forum_Access ($fa_priority), which means the latter is <b>completely disabled</b> for the %content_type type! Unless you really know what you're doing, we recommend that you go to the !link page, change the priority (under %Advanced) to 0, and clear all checkboxes.", $variables) .'</div>',
          );
        }
      }
      else {
        $form['forum_access']['interference'][] = array(
          '#value' => '<p>'. t('Note: You have installed the !Content_Access module, which has the capability to grant access to content that would otherwise be protected by !Forum_Access. Be careful when configuring !Content_Access!', $variables) .'</p>',
        );
      }
    }
    /*
    $form['forum_access']['interference']['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['forum_access']['interference']['advanced']['priority'] = array(
      '#type' => 'weight',
      '#title' => t('Priority of !Forum_Access node grants in this forum', $variables),
      '#value' => $fa_priority,
      '#default_value' => $fa_priority,
      '#description' => t("If you have no other node access control modules installed, you should leave this at the default 0. <br /> Otherwise you can raise or lower the priority of !Forum_Access' grants. Out of all the grants contributed to a node, only those with the highest priority are used, and all others are discarded.", $variables),
    );
    /**/
  }

  // Move some stuff down so our block goes in a nice place.
  $form['submit']['#weight'] = 10;
  $form['delete']['#weight'] = 10;

  $form['#submit'][] = 'forum_access_form_submit';
}

function forum_access_form_submit($form, &$form_state) {
  db_query("DELETE FROM {forum_access} WHERE tid = %d", $form_state['values']['tid']);
  $access = $form_state['values']['forum_access']; // shortcut
  //$fa_priority = $access['interference']['advanced']['priority'];
  if (array_key_exists('acl', $access)) {
    acl_save_form($access['acl']);
  }
  foreach ($access['view'] as $rid => $checked) {
    $grants[] = array(
      'realm' => 'forum_access',
      'gid' => $rid,
      'grant_view' => (bool) $checked,
      'grant_update' => !empty($access['update'][$rid]),
      'grant_delete' => !empty($access['delete'][$rid]),
    );
    db_query("INSERT INTO {forum_access} (tid, rid, grant_view, grant_update, grant_delete, grant_create) VALUES (%d, %d, %d, %d, %d, %d)", $form_state['values']['tid'], $rid, (bool) $checked, !empty($access['update'][$rid]), !empty($access['delete'][$rid]), !empty($access['create'][$rid]));
  }

  // mass update
  $result = db_query("SELECT n.nid FROM {node} n LEFT JOIN {term_node} tn ON tn.nid = n.nid WHERE tn.tid = %d", $form_state['values']['tid']);
  while ($node = db_fetch_object($result)) {
    node_access_write_grants($node, $grants, 'forum_access');
  }
}

/**
 * We must know when a role is deleted.
 */
function forum_access_user_admin_role_form($form_id, &$form) {
  $form['#submit'][] = 'forum_access_user_admin_role_submit';
}

/**
 * If a role is deleted, we remove the grants it provided.
 */
function forum_access_user_admin_role_submit($form, &$form_state) {
  if ($form_state['values']['op'] == $form_state['values']['delete']) {
    db_query("DELETE FROM {forum_access} WHERE rid = %d", $form_state['values']['rid']);
    db_query("DELETE FROM {node_access} WHERE gid = %d AND realm = 'forum_access'", $form_state['values']['rid']);
  }
}

/**
 * Because in order to restrict the visible forums, we have to rewrite
 * the sql. This is because there isn't a node_access equivalent for
 * taxonomy. There should be.
 */
function forum_access_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  if ($primary_field == 'tid' && !user_access('administer forums')) {
    global $user;
    $roles = _forum_access_get_roles($user);
    $sql['join'] = "LEFT JOIN {forum_access} fa ON $primary_table.tid = fa.tid
                    LEFT JOIN {acl} acl ON acl.name = ". ($GLOBALS['db_type'] == 'pgsql' ? 'CAST(' : '')
                                                    ."$primary_table.tid". ($GLOBALS['db_type'] == 'pgsql' ? ' AS CHAR)' : '')
                                                                      ." AND acl.module = 'forum_access' 
                    LEFT JOIN {acl_user} aclu ON aclu.acl_id = acl.acl_id AND aclu.uid = $user->uid";
    $sql['where'] = "(fa.grant_view >= 1 AND fa.rid IN ($roles)) OR fa.tid IS NULL OR aclu.uid = $user->uid";
    $sql['distinct'] = 1;
    return $sql;
  }
}

/**
 * nodeapi hook to add ACL data to fresh forum posts.
 */
function forum_access_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  static $old_tid = NULL;
  // This is modeled after forum_nodeapi():
  $vid = variable_get('forum_nav_vocabulary', '');
  $vocabulary = taxonomy_vocabulary_load($vid);
  if (empty($vocabulary) || !in_array($node->type, $vocabulary->nodes)) {
    return;
  }

  switch ($op) {
    case 'presave':
      $old_tid = db_result(db_query('SELECT tid FROM {forum} WHERE nid = %d', $node->nid));
      break;
      
    case 'update':
      if (!empty($old_tid)) {
        if (!empty($node->tid) && $node->tid == $old_tid) {
          return;
        }
        $acl_id = db_result(db_query("SELECT acl_id from {acl} WHERE module = 'forum_access' AND name = '%d'", $old_tid));
        acl_node_remove_acl($node->nid, $acl_id);
      }
      // Deliberate no break -- for changed and for previously unassigned terms we need an insert.

    case 'insert':
      if (!empty($node->tid)) {
        $acl_id = db_result(db_query("SELECT acl_id from {acl} WHERE module = 'forum_access' AND name = '%d'", $node->tid));
        acl_node_add_acl($node->nid, $acl_id, 1, 1, 1);
      }
      $old_tid = NULL;
      break;
  }
}

/**
 * Get an array of moderator UIDs or NULL.
 */
function forum_access_get_moderator_uids($tid) {
  if ($acl_id = acl_get_id_by_name('forum_access', $tid)) {
    if ($uids = acl_get_uids($acl_id)) {
      return $uids;
    }
  }
}

/**
 * Implementation of $modulename_preprocess_$hook().
 *
 * Add forum_access_moderators to each forum,
 * containing a list of user objects.
 *
 * Note: On a site with many moderators, this function is expensive,
 * and thus it is disabled by default. Set the variable to TRUE to enable.
 */
function forum_access_preprocess_forum_list(&$variables) {
  if (variable_get('forum_access_provide_moderators_template_variable', FALSE)) {
    static $users;
    foreach ($variables['forums'] as $tid => $forum)
    {
      $moderators = array();
      if ($uids = forum_access_get_moderator_uids($tid)) {
        foreach ($uids as $uid) {
          if (!isset($users[$uid])) {
            $users[$uid] = user_load(array('uid' => $uid));
          }
          $moderators[$uid] = $users[$uid];
        }
      }
      $forum->forum_access_moderators = (empty($moderators) ? NULL : $moderators);
    }
  }
}

/**
 * This is also required by ACL module.
 */
function forum_access_enabled($set = NULL) {
  static $enabled = true;
  if ($set !== NULL) {
    $enabled = $set;
  }
  return $enabled;
}

/**
 * Implementation of hook_enable().
 */
function forum_access_enable() {
  node_access_needs_rebuild();
}

/**
 * Implementation of hook_disable().
 */
function forum_access_disable() {
  forum_access_enabled(FALSE);
  node_access_needs_rebuild();
}

/**
 * Use hook init to deny access to forums if the user does not have access
 * to it.
 */
function forum_access_init() {
  if (!function_exists('user_access')) {
    // page is cached; bail.
    return;
  }

  if (!user_access('administer forums') && arg(0) == 'forum' && is_numeric(arg(1))) {
    global $user;
    if (!forum_access_access(arg(1), 'view')) {
      drupal_access_denied();
      module_invoke_all('exit');
      exit;
    }
  }
}

/**
 * See if a given user has access to a forum.
 *
 * $tid -- the tid of the forum
 * $type -- view, update, delete or create
 * $account -- the account to test for. If NULL use current user.
 */
function forum_access_access($tid, $type, $account = NULL) {
  static $cache = array();

  if (!$account) {
    global $user;
    $account = $user;
  }

  if (user_access('administer forums', $account)) {
    return TRUE;
  }

  if (!isset($cache[$account->uid][$tid][$type])) {
    $roles = _forum_access_get_roles($account);
    $result = db_result(db_query("SELECT tid FROM {forum_access} WHERE rid IN (%s) AND grant_%s = 1 AND tid = %d", $roles, $type, $tid));

    if ($result) {
      $cache[$account->uid][$tid][$type] = TRUE;
    }
    else {
      // check our moderators too
      $acl_id = db_result(db_query("SELECT acl_id from {acl} WHERE module = 'forum_access' AND name = '%d'", $tid));
      $result = db_result(db_query("SELECT uid FROM {acl_user} WHERE acl_id = %d AND uid = %d", $acl_id, $account->uid));
      if ($result) {
        $cache[$account->uid][$tid][$type] = TRUE;
      }
      else {
        $cache[$account->uid][$tid][$type] = FALSE;
      }
    }
  }
  return $cache[$account->uid][$tid][$type];
}

/**
 * Get the roles of a user.
 */
function _forum_access_get_roles($user) {
  return implode(', ', array_keys($user->roles));
}

/**
 * Implementation of hook_node_access_explain().
 */
function forum_access_node_access_explain($row) {
  static $roles = NULL;
  if ($row->realm == 'forum_access') {
    if (!isset($roles)) {
      $roles = user_roles();
    }
    if (isset($roles[$row->gid])) {
      return array($roles[$row->gid]);
    }
    return array('(unknown gid)');
  }
}

